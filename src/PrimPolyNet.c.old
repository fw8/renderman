/* \subsection{PrimPolyNet.c} \label{PrimPolyNet.c}
  Dieses File enth"alt alle Routinen, die zur Verwaltung und Berechnung
  des Objekts Polygonnetz n"otig sind!
\begin{verbatim} */
#ifdef sun4
#include <alloca.h>
#endif
#include <varargs.h>

#include "RiTokens.h"
#include "RiError.h"
#include "Prim.h"
#include "MathVector.h"
#include "Math.h"
#include "RiTypes.h" 
#include "Misc.h"

#define EQ(a,b) (!strcmp((a),(b)))
#define NEQ(a,b) (!EQ(a,b))


typedef struct {
        RtPoint a,b,n; 		/* Vektor1,Vektor2,Normale */
        RtFloat d; 		/* Plane Constant */
        RtInt ukor,vkor; 	/* Welche Koordinaten werden denn benutzt ? */
        RtFloat umin,umax,vmin,vmax; /* Box f"ur Poly */
} InnerPoly;	

typedef struct {
	int npolys;		/* Anzahl der Polygone */
	int *nverts;		/* Liste der Eckenzahl pro Polygon */
        int *verts;		/* Liste welche Ecken je ein Polygon bilden */
	RtPoint *vertics;	/* Liste der unterschiedlichen ecken */
        RtPoint *normals;	/* Liste der an Ecken gebundenen Normalen */  
        RtColor	*colors;	/* Liste der an Ecken gebundenen Farben */
	RtColor *opacities;	/* Liste der an Ecken gebundenen Transparenz */
	InnerPoly *innerpolys;  /* Liste der inneren Polygonstrukturen */
} PolyNet;

typedef struct {		/* Kleine Hilfsstruktur f"ur sp"ateren Schnitt*/
	InnerPoly *inpoly;
        RtPoint schnitt;
	int	polynumber;
} PNetSet;
/* \end{verbatim} \label{PrimPolyNet.c:PolyNetName} \begin{verbatim}
 * PolyNetName: Gibt Namen des Objekts zur"uck.
 *
 *              OUTPUT: Namensstring
 */
static char *
PolyNetName()
{
	return "polygonnetz";
}
/* \end{verbatim} \label{PrimPolyNet.c:PolyNetInfo} \begin{verbatim}
 * PolyNetInfo: Gibt Informationen "uber dieses Objektes zur"uck.
 *
 */
static void
PolyNetInfo(prim,stream)
  Prim  *prim;
  FILE  *stream;
{
	PolyNet	*p;
	int	i;

	p = (PolyNet *)prim->data;
	fprintf(stream,"polygonnetz: %d polygons:\n",p->npolys);
	for (i=0;i<p->npolys;i++) {
	  fprintf(stream,"poly %d: %d vertics!\n",p->nverts[i]);
	}
}

/*
 * PolyNetBound: give bounds of object (in object coordinates).
 */
static void
PolyNetBound(prim,bound)
Prim *prim;
RtBound bound;
{
  int  i,nvertics;
  PolyNet *o = (PolyNet *)prim->data;
  RtFloat xmin,xmax,ymin,ymax,zmin,zmax;

  xmin=o->vertics[0][0];
  xmax=o->vertics[0][0];
  ymin=o->vertics[0][1];
  ymax=o->vertics[0][1];
  zmin=o->vertics[0][2];
  zmax=o->vertics[0][2];

  for(nvertics=i=0;i<o->npolys;i++) nvertics += o->nverts[i];

  for (i=1;i<nvertics;i++)  {
    if (o->vertics[i][0] < xmin) xmin = o->vertics[i][0];
    if (o->vertics[i][0] > xmax) xmax = o->vertics[i][0];
    if (o->vertics[i][1] < ymin) ymin = o->vertics[i][1];
    if (o->vertics[i][1] > ymax) ymax = o->vertics[i][1];
    if (o->vertics[i][2] < zmin) zmin = o->vertics[i][2];
    if (o->vertics[i][2] > zmax) zmax = o->vertics[i][2];
  }

  if (xmin-xmax<RI_EPSILON) {
    bound[0] = xmin-RI_EPSILON;
    bound[3] = xmax+RI_EPSILON;
  }else{
    bound[0] = xmin;
    bound[3] = xmax;
  }

  if (ymin-ymax<RI_EPSILON) {
    bound[1] = ymin-RI_EPSILON;
    bound[4] = ymax+RI_EPSILON;
  }else{
    bound[1] = ymin;
    bound[4] = ymax;
  }

  if (zmin-zmax<RI_EPSILON) {
    bound[2] = zmin-RI_EPSILON;
    bound[5] = zmax+RI_EPSILON;
  }else{
    bound[2] = zmin;
    bound[5] = zmax;
  }

}



/* \end{verbatim} \label{PrimPolyNet.c:PolyNetIntersect} \begin{verbatim}
 * PolyNetIntersect: intersects ray with polygon prim and put intersections in
 * hit list
 *              INPUT : ray =  Zeiger auf Strahl, der schneiden soll
 *                      prim = Zeiger auf das Primitiv
 *                      hit  = Zeiger auf die Hit-Struktur
 *              OUTPUT: 0 = kein Schnitt gefunden
 *                      sonst Anzahl der Schnitte.
 */
static int
PolyNetIntersect(ray,prim,hit)
  Ray	*ray;
  Prim	*prim;
  Isect *hit;
{
  PolyNet   *pn;
  InnerPoly *inp;
  RtPoint schnitt,n,m;
  double    d,l;
  int       i,nhits;
  PNetSet   *tmp;
  Isect     *thit;

  thit = hit;

  pn = prim->data;

  nhits = 0;

  for(i=0;i<pn->npolys;i++) {	/* Hit all inner Polygons ! */

    inp = &(pn->innerpolys[i]);
    copyV3(inp->n,n);

    if ((d = smulV3(ray->D,n)) != 0.0) { /* Schnitt existiert */
      l = (inp->d - smulV3(inp->n,ray->P)) / d;
      if (l > RI_EPSILON) {
        RayPoint(ray,l,schnitt);          /* Schnittpunkt festlegen */
        if ( (schnitt[inp->ukor]<inp->umin)||(schnitt[inp->ukor]>inp->umax)||
             (schnitt[inp->vkor]<inp->vmin)||(schnitt[inp->vkor]>inp->vmax) )
          continue;       /* Not in Box of Poly */
        if (RmHitInnerPoly(schnitt,pn,i,inp))  { /* Im Polygon ? */
          tmp = (PNetSet *)RmGetJunk(sizeof(PNetSet));
          copyV3(schnitt,tmp->schnitt); /* Save intersect tempor. */
          tmp->inpoly = inp;
          tmp->polynumber = i;
          IsectAdd(hit,l,prim,tmp);
          hit++;
	  nhits++;
        } 
      }
    }
  }
  if (nhits > 1)
    RmSortHitList(thit,nhits); /* Schnittpunkte sortieren ! */
  return nhits; 
}

/* \end{verbatim} \label{PrimPolyNet.c:PolyNetSetup} \begin{verbatim}
 * PolyNetSetup: F"ullt den I/O-Block mit allem, was der Shader braucht
 *
 *              INPUT : hit = Zeiger auf Hitstruktur
 *                      iof = Zeiger auf Input/Output Flags
 *                      iob = Zeiger auf Input/Output Block
 */
static void
PolyNetSetup(hit,iof,iob)
 Isect	*hit;
 IOF    *iof;
 IOB	*iob;
{
  Prim *prim;
  PolyNet *p;
  InnerPoly *inp;
  RtPoint schnitt;
  float	*abstand;
  float maxabstand,abssumme;
  RtPoint normale,tmp;
  RtColor color,opac;
  int	i,polynumber,indexbegin,indexend;
  PNetSet retter;

  prim = hit->prim;
  p = (PolyNet *)prim->data;
  i = sizeof(PNetSet);
  RmMemCpy(hit->data,&retter,i);
  copyV3(retter.schnitt,schnitt);
  inp = retter.inpoly;
  indexbegin = indexend = 0;
  for (i=0;i<retter.polynumber;i++)
    indexbegin += p->nverts[i];
  indexend = indexbegin + p->nverts[retter.polynumber];

  abstand = (float *)alloca(p->nverts[retter.polynumber]*sizeof(float));

  if (iof->Cs) {     /* Shader needs the Color */
    if (p->colors != (void *)0) { /* There are vertic-colors to interpol.*/
      maxabstand = 0.0;
      abssumme = 0.0;		/* Ermittlung der Lage im Verh"altnis zu den
                                   Ecken! */
      color[0] = color[1] = color[2] = 0.0;
      for (i=indexbegin;i<indexend;i++) {
	subV3(schnitt,p->vertics[p->verts[i]],tmp);
	if ( (abstand[i-indexbegin]=lenV3(tmp)) > maxabstand ) 
           maxabstand = abstand[i-indexbegin];
      }
      for (i=indexbegin;i<indexend;i++) {
	abssumme += abstand[i-indexbegin] = maxabstand / abstand[i-indexbegin];
	color[0] += abstand[i-indexbegin]*p->colors[p->verts[i]][0];
	/* Je nach Abstand Farbanteil dazu. */
	color[1] += abstand[i-indexbegin]*p->colors[p->verts[i]][1];
	color[2] += abstand[i-indexbegin]*p->colors[p->verts[i]][2];
      }
      color[0] /= abssumme;	/* Jetzt noch normalisieren. */
      color[1] /= abssumme;
      color[2] /= abssumme;
      copyV3(color,iob->Cs);
    } else {

      copyV3(prim->attrib.Cs,iob->Cs);      /* Else PolyNet-Color */

    }
  }

  if (iof->Os) {      /* Shader needs the Opacity */
    if (p->opacities != (void *)0) {/* There are vertic-opacities to interpol.*/
      maxabstand = 0.0;
      abssumme = 0.0;
      opac[0] = opac[1] = opac[2] = 0.0;
      for (i=indexbegin;i<indexend;i++) {	/* Gleiches Spiel wie mit den
                                                   Farben. */
        subV3(schnitt,p->vertics[p->verts[i]],tmp);
        if ( (abstand[i-indexbegin]=lenV3(tmp)) > maxabstand ) 
          maxabstand = abstand[i-indexbegin];
      }
      for (i=indexbegin;i<indexend;i++) {
        abssumme += abstand[i-indexbegin] = maxabstand / abstand[i-indexbegin];
        opac[0] += abstand[i-indexbegin]*p->opacities[p->verts[i]][0];
        opac[1] += abstand[i-indexbegin]*p->opacities[p->verts[i]][1];
        opac[2] += abstand[i-indexbegin]*p->opacities[p->verts[i]][2];
      }
      opac[0] /= abssumme;
      opac[1] /= abssumme;
      opac[2] /= abssumme;
      copyV3(opac,iob->Os);
    } else {
      copyV3(prim->attrib.Os,iob->Os);      /* Else PolyNet-Opacity */
    }
  }

  if (iof->N || iof->Ng) {	/* Shader needs the Normal */
    if (p->normals != (void *)0) { /* There are vertic-normals to interpol.*/
      maxabstand = 0.0;
      abssumme = 0.0;
      normale[0] = normale[1] = normale[2] = 0.0;
      for (i=indexbegin;i<indexend;i++) {	/* Gleiches Spiel wie mit den
                                                   Farben. */
        subV3(schnitt,p->vertics[p->verts[i]],tmp);
        if ( (abstand[i-indexbegin]=lenV3(tmp)) > maxabstand ) 
          maxabstand = abstand[i-indexbegin];
      }
      for (i=indexbegin;i<indexend;i++) {
        abssumme += abstand[i-indexbegin] = maxabstand / abstand[i-indexbegin];
        normale[0] += abstand[i-indexbegin]*p->normals[p->verts[i]][0];
        normale[1] += abstand[i-indexbegin]*p->normals[p->verts[i]][1];
        normale[2] += abstand[i-indexbegin]*p->normals[p->verts[i]][2];
      }
      normale[0] /= abssumme;
      normale[1] /= abssumme;
      normale[2] /= abssumme;
      copyV3(normale,iob->N);
    } else {
      copyV3(inp->n,iob->N);	/* Else PolyNet-Normal */
    }
  }
  
  if (iof->Ng) {
    copyV3(iob->N,iob->Ng);
  }

  if (iof->u)	{		/* Needs Surface Space */
    iob->u = schnitt[0];	/* x */
    iob->v = schnitt[1];	/* y */
  }

  if (iof->s)   {		/* Need Texture */
    iob->s = schnitt[0];
    iob->t = schnitt[1];
  }

}

static PrimProcs PolyNetProgs = {
	PolyNetName,
	PolyNetInfo,		/* Die Routinen f"ur dieses Objekt! */
	PolyNetBound,
	PolyNetIntersect,
	PolyNetSetup
};

/* \end{verbatim} \label{PrimPolyNet.c:Rm_GenPolyNet} \begin{verbatim}
 * Rm_GenPolyNet: Generiert aus den "ubergebenen Parametern eine neue
 *                Polygonnetzstruktur!
 *
 *              INPUT : npolys = Anzahl der Polygone
 *			nverts = Array mit Anzahl der Ecken pro Polygon
 *			verts  = Array mit den Ecken der Polygone
 *                      argp = Parameterliste.
 *              OUTPUT: Zeiger auf die neue Objektstruktur
 */
Prim *
Rm_GenPolyNet(npolys,nverts,verts,argp)
  RtInt npolys,nverts[],verts[];
  va_list       argp;
{
  RtToken	token;
  RtPoint       *help;
  PolyNet	*po;
  Prim		*pr;
  int		i,k,l,gesamtverts,gesamtindex,indexbegin,indexend;
  RtFloat       xmin,xmax,ymin,ymax,zmin,zmax,dx,dy,dz;

  po = (PolyNet *)RmMalloc(sizeof(PolyNet)); /* Erst mal Platz schaffen. */
  pr = (Prim *)RmMalloc(sizeof(Prim)); /* F"ur Polygonnetz und Objektstruktur */

  po->npolys = npolys;	/* Anzahl der Polygone */
  po->nverts = (int *)RmMalloc(npolys*sizeof(int)); /* Entsprechend Platz */
  gesamtverts = gesamtindex = 0;
  for(i=0;i<npolys;i++) {
    gesamtindex += po->nverts[i] = nverts[i]; /* Und eintragen */
  }
  po->verts = (int *)RmMalloc(gesamtindex*sizeof(int)); /* Platz f"ur die
						eigentlichen Eckpunkte */
  for(i=0;i<gesamtindex;i++) {
    po->verts[i] = verts[i];	/* eintragen */
    if (verts[i] > gesamtverts) gesamtverts = verts[i];
  }
  po->vertics = (void *)0;	/* Defaultwerte setzen */
  po->colors = (void *)0;
  po->opacities = (void *)0;
  po->normals = (void *)0;
  po->innerpolys = (InnerPoly *)RmMalloc(npolys*sizeof(InnerPoly));
	/* Platz f"ur die inneren Polygonstrukturen schaffen */

  token = va_arg(argp,RtToken); /* Und in die Parameterliste */

  while (token != RI_NULL) {

    if (EQ(token,RI_P)) {	/* Kommen da etwa Punkte ? */
      po->vertics = (RtPoint *)RmMalloc(gesamtverts+1*sizeof(RtPoint));
      help = (RtPoint *)va_arg(argp,RtPointer); /* Aus Liste einen Punkt
                                                   rausziehen */
      for (i=0;i<=gesamtverts;i++)  {
        copyV3(help[i],po->vertics[i]); /* Und in Polygonstruktur "ubertragen */
      }

      indexbegin = 0;
      for(i=0;i<npolys;i++) { /* Fill all inner Polygonblocks */

        indexend = indexbegin + nverts[i] - 1;

	/* Vektor 1 */
        subV3(po->vertics[verts[indexbegin+1]],po->vertics[verts[indexbegin]],
              po->innerpolys[i].a);
	/* Vektor 2 */
        subV3(po->vertics[verts[indexend]],po->vertics[verts[indexbegin]],
              po->innerpolys[i].b);
	/* Berechnung der Normalen */
        vmulV3(po->innerpolys[i].a,po->innerpolys[i].b,po->innerpolys[i].n);
	/* Plane Constant */
	po->innerpolys[i].d = smulV3(po->innerpolys[i].n,
                                     po->vertics[verts[indexbegin]]);
  
        xmax = xmin=po->vertics[verts[indexbegin]][0];
        ymax = ymin=po->vertics[verts[indexbegin]][1];
        zmax = zmin=po->vertics[verts[indexbegin]][2];
  
        for (k=0;k<nverts[i];k++)  { /* Nun eine Box f"ur dieses PolyNet */
       	  if (po->vertics[verts[indexbegin+k]][0] < xmin) 
  	    xmin = po->vertics[verts[indexbegin+k]][0];
  	  if (po->vertics[verts[indexbegin+k]][0] > xmax) 
	    xmax = po->vertics[verts[indexbegin+k]][0];
          if (po->vertics[verts[indexbegin+k]][1] < ymin)
            ymin = po->vertics[verts[indexbegin+k]][1];
          if (po->vertics[verts[indexbegin+k]][1] > ymax)
            ymax = po->vertics[verts[indexbegin+k]][1];
          if (po->vertics[verts[indexbegin+k]][2] < zmin)
            zmin = po->vertics[verts[indexbegin+k]][2];
          if (po->vertics[verts[indexbegin+k]][2] > zmax)
            zmax = po->vertics[verts[indexbegin+k]][2];
        }
        dx = xmax-xmin;	/* Sp"ater wird beim Schnitt das Polygon auf eine
                           Ebene projektziert!
                           Hier wird ermittelt auf welche! */
        dy = ymax-ymin;
        dz = zmax-zmin;
        if ( (dx<dy) && (dx<dz) ){
  	  po->innerpolys[i].ukor = 1;
	  po->innerpolys[i].vkor = 2; /* y and z Koordinaten sind notwendig */	
	  po->innerpolys[i].umin = ymin;
	  po->innerpolys[i].umax = ymax;
	  po->innerpolys[i].vmin = zmin;
	  po->innerpolys[i].vmax = zmax;
        } else
        if ( (dy<dx) && (dy<dz) ) {
	  po->innerpolys[i].ukor = 0;
          po->innerpolys[i].vkor = 2; /* x and z Koordinatesn sind notwendig */
          po->innerpolys[i].umin = xmin;
          po->innerpolys[i].umax = xmax;
          po->innerpolys[i].vmin = zmin;
          po->innerpolys[i].vmax = zmax;
        } else {
	  po->innerpolys[i].ukor = 0;
          po->innerpolys[i].vkor = 1;  /* x and y Koordinaten sind notwendig */
          po->innerpolys[i].umin = xmin;
          po->innerpolys[i].umax = xmax;
          po->innerpolys[i].vmin = ymin;
          po->innerpolys[i].vmax = ymax;
        }

	indexbegin = indexend+1;

      }

    } else if (EQ(token,RI_N)) { /* Kommen da Normale ? */
        po->normals = (RtPoint *)RmMalloc((gesamtverts+1)*sizeof(RtPoint));
	help = (RtPoint *)va_arg(argp,RtPointer);
        for (i=0;i<=gesamtverts;i++)  {
          copyV3(help[i],po->normals[i]); /* In Polygon eintragen */
        }
    } else if (EQ(token,RI_CS)) { /* Kommen da an Ecken gebundene Farben ? */
        po->colors = (RtColor *)RmMalloc((gesamtverts+1)*sizeof(RtColor));
        help = (RtPoint *)va_arg(argp,RtPointer);
        for (i=0;i<=gesamtverts;i++)  {
          copyV3(help[i],po->colors[i]); /* In Polygon eintragen */
        }
    } else if (EQ(token,RI_OS)) { /* Oder etwa Transparenzen / */
        po->opacities = (RtPoint *)RmMalloc((gesamtverts+1)*sizeof(RtColor));
        help = (RtColor *)va_arg(argp,RtPointer);
        for (i=0;i<=gesamtverts;i++)  {
          copyV3(help[i],po->opacities[i]); /* In Polygon eintragen */
        }
    } else {
        sprintf(RmMsg,"[RiPrimPolyNet.GenPoly] unknown or wrong token RI_%s",
                token);
        error(1,RmMsg);
    }

    token=va_arg(argp,RtToken); /* fetch next token */
  }

  pr->type = PRIMITIVE;
  pr->data = po;		/* Polygonnetz in Objekt eintragen */
  pr->procs = &PolyNetProgs;    /* Und die zugeh"origen Funktionen eintragen */

  return pr;
}


/*
 * Die Quadranten sind folgenderma"sen definiert:
 *        |
 *   1    |   0
 *        |
 * -------c--------
 *        |
 *   2    |   3
 *        |
 */
#define quadrant(p, c) ((p.u<c.u) ? ((p.v<c.v) ? 2 : 1) : ((p.v<c.v) ? 3 : 0))

/* \end{verbatim} \label{PrimPolyNet.c:RmHitInnerPoly} \begin{verbatim}
 * RmHitInnerPoly: Hier also der Test, ob der ermittelte Schnittpunkt zwischen
 *            Strahl und Polugonebene auch tats"achlich innerhalb der
 *            Polygonschranken liegt.
 *
 *              INPUT : point = Ermittelter Schnittpunkt Strahl und Poly-
                                gonebene!
 *                      pn =  Zeiger auf Polygonnetzstruktur.
 *			index = Nummer des inneren Polygons
 *			p  = Zeiger auf inner Polygon
 *              OUTPUT: 0 = nicht innerhalb des Polygonnetzes
 *                      1 = innerhalb des Polygonnetzes.
 */
int
RmHitInnerPoly(point,pn,index,p)
  RtPoint point;
  PolyNet *pn;
  int	index;
  InnerPoly    *p;
{
        register int winding, i;
        int quad, lastquad,indexbegin,indexend;
        double left, right;
        Vec2d center, cur, last;


	indexbegin = indexend = 0;
	for(i=0;i<index;i++) indexbegin += pn->nverts[i];
  	indexend = indexbegin + pn->nverts[index];

        center.u = point[p->ukor];
        center.v = point[p->vkor];

        winding = 0;
        last.u = pn->vertics[pn->verts[indexend-1]][p->ukor];
        last.v = pn->vertics[pn->verts[indexend-1]][p->vkor];
        lastquad = quadrant(last, center);
	for (i=indexbegin;i<indexend;i++) {
		cur.u = pn->vertics[pn->verts[i]][p->ukor];
		cur.v = pn->vertics[pn->verts[i]][p->vkor];
                quad = quadrant(cur, center);
                if(quad != lastquad) {
                        if(((lastquad + 1) & 3) == quad)
                                winding++;
                        else if(((quad + 1) & 3) == lastquad)
                                winding--;
                        else {
                                /*
                                 * Find where edge crosses
                                 * center's X axis.
                                 */
                                right = last.u - cur.u;
                                left = last.v - cur.v;
                                left *= center.u - last.u;
                                if(left + last.v * right > right * center.v)
                                        winding += 2;
                                else
                                        winding -= 2;
                        }
                        lastquad = quad;
                }

        }
        return (winding == 0 ? 0 : 1);
}
/*\end{verbatim}*/
